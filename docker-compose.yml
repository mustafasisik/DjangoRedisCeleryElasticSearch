version: '3.8'

services:
  django:
    container_name: django
    image: djelastic:test
    expose:
      - 8080
    ports:
      - "8080:8080"
    command: python manage.py runserver 0.0.0.0:8080
    depends_on:
      - redis
      - postgresql
      - node01  # Dependency on Elasticsearch
    volumes:
      - ./djelastic/:/usr/src/djelastic/
      - static_volume:/usr/src/djelastic/staticfiles
      - media_volume:/usr/src/djelastic/mediafiles
    env_file:
      - .env
    networks:
      - mynetwork
    restart: always

  celery_worker:
    container_name: celery_worker
    image: djelastic:test
    command: celery -A djelastic worker -E -l INFO --prefetch-multiplier 1 --concurrency 1 --max-tasks-per-child 1 --uid=2 --gid=1
    volumes:
      - ./djelastic/:/usr/src/djelastic/
      - static_volume:/usr/src/djelastic/staticfiles
      - media_volume:/usr/src/djelastic/mediafiles
    env_file: .env
    networks:
      - mynetwork
    depends_on:
      - django

  redis:
    container_name: redis
    image: redis:7.2
    env_file:
      - .env
    command: [ "redis-server", "--save", '""', "--stop-writes-on-bgsave-error", "no" ]
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - mynetwork
    restart: always

  postgresql:
    container_name: postgresql
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - mynetwork
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always

  node01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: node01
    environment:
      - node.name=node01
      - cluster.name=es-cluster-7
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elastic:/var/lib/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mynetwork

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    environment:
      ELASTICSEARCH_HOSTS: "http://node01:9200"
    ports:
      - "5601:5601"
    networks:
      - mynetwork
    depends_on:
      - node01

networks:
  mynetwork:
    driver: bridge

volumes:
  es-data01:
    driver: local
  postgres_data:
  static_volume:
  media_volume:
  redis_volume_data:
